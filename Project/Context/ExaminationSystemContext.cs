// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using System.Data.Common;
using System.Data;
using Microsoft.EntityFrameworkCore;
using WebApplication1.Entities;
using WebApplication1.Models;

namespace WebApplication1.Context;

public partial class ExaminationSystemContext : DbContext
{
	public ExaminationSystemContext()
	{
	}

	public ExaminationSystemContext(DbContextOptions<ExaminationSystemContext> options)
		: base(options)
	{
	}

	public virtual DbSet<Choice> Choices { get; set; }

	public virtual DbSet<Course> Courses { get; set; }

	public virtual DbSet<Department> Departments { get; set; }

	public virtual DbSet<Exam> Exams { get; set; }

	public virtual DbSet<Exam_Structure> Exam_Structures { get; set; }

	public virtual DbSet<Instructor> Instructors { get; set; }

	public virtual DbSet<Question> Questions { get; set; }

	public virtual DbSet<Student> Students { get; set; }

	public virtual DbSet<Student_Answer> Student_Answers { get; set; }

	public virtual DbSet<Topic> Topics { get; set; }

	public DbSet<SelectStudentExamsResult> selectStudentExamsResult { get; set; }

	public IList<SelectStudentExamsResult> GetStudentsFromStoredProcedure(int studID)
	{
		return selectStudentExamsResult.FromSqlRaw("EXECUTE SelectStudentExams {0}", studID).ToList();
	}

	public DbSet<Select_Exam_QuestionResult> select_Exam_QuestionResult { get; set; }

	public IList<Select_Exam_QuestionResult> Select_Exam_Question(int Exam_ID)
	{
		return select_Exam_QuestionResult.FromSqlRaw("EXECUTE Select_Exam_Question {0}", Exam_ID).ToList();
	}

	public DbSet<Select_ChoicesResult> select_ChoicesResult { get; set; }

	public IList<Select_ChoicesResult> Select_ChoicesResult(int Qustion_ID)
	{
		return select_ChoicesResult.FromSqlRaw("EXECUTE Select_Choices {0}", Qustion_ID).ToList();
	}

	//[ExamGeneration]


	public void ExamGeneration(int Exam_ID)
	{
		Database.ExecuteSqlRaw("EXECUTE ExamGeneration {0}", Exam_ID);
	}

	//[ExamCorrection]
	public void ExamCorrection(int student_ID, int Exam_ID)
	{
		Database.ExecuteSqlRaw("EXECUTE ExamCorrection {0} , {1}", student_ID, Exam_ID);
	}

	//[ExamAnswers]
	public void ExamAnswers(int student_ID, int Exam_ID, string ans1, string ans2, string ans3, string ans4, string ans5, string ans6, string ans7, string ans8, string ans9, string ans10)
	{

		Database.ExecuteSqlRaw("EXECUTE ExamAnswers {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10},{11}",
								student_ID, Exam_ID, ans1, ans2, ans3, ans4, ans5, ans6, ans7, ans8, ans9, ans10);
	}


	//GetExamDetails
	public Dictionary<string, object> GetExamDetails(int examId)
	{
		var examDetails = new Dictionary<string, object>();

		// Define parameters for the stored procedure
		var examIdParam = new DbParameter[]
		{
				new SqlParameter
				{
					ParameterName = "@Exam_ID",
					DbType = DbType.Int32,
					Value = examId,
					Direction = ParameterDirection.Input
				}
		};

		// Call the stored procedure and map the results to the examDetails dictionary
		using (var command = Database.GetDbConnection().CreateCommand())
		{
			command.CommandText = "GetExamDetails";
			command.CommandType = CommandType.StoredProcedure;
			command.Parameters.AddRange(examIdParam);

			Database.OpenConnection();
			using (var result = command.ExecuteReader())
			{
				if (result.Read())
				{
					for (int i = 0; i < result.FieldCount; i++)
					{
						var columnName = result.GetName(i);
						var columnValue = result.GetValue(i);
						examDetails.Add(columnName, columnValue);
					}
				}
			}
		}

		return examDetails;
	}

	protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
		=> optionsBuilder.UseSqlServer("Data Source=MSI\\SQLEXPRESS;Initial Catalog=ExaminationSystem;Integrated Security=True;Encrypt=True;TrustServerCertificate=True");

	protected override void OnModelCreating(ModelBuilder modelBuilder)
	{
		modelBuilder.Entity<Select_ChoicesResult>().HasNoKey().ToView(null);
		modelBuilder.Entity<Select_Exam_QuestionResult>().HasNoKey().ToView(null);
		modelBuilder.Entity<SelectStudentExamsResult>().HasNoKey().ToView(null);

		modelBuilder.UseCollation("SQL_Latin1_General_CP1_CI_AS");

		modelBuilder.Entity<Choice>(entity =>
		{
			entity.HasOne(d => d.Question).WithMany(p => p.Choices).HasConstraintName("FK_Choices_Question");
		});

		modelBuilder.Entity<Course>(entity =>
		{
			entity.Property(e => e.Course_ID).ValueGeneratedNever();
		});

		modelBuilder.Entity<Exam>(entity =>
		{
			entity.HasOne(d => d.Structure).WithMany(p => p.Exams)
				.OnDelete(DeleteBehavior.ClientSetNull)
				.HasConstraintName("FK_Exam_Exam_Structure");

			entity.HasOne(d => d.Student).WithMany(p => p.Exams)
				.OnDelete(DeleteBehavior.ClientSetNull)
				.HasConstraintName("FK_Exam_Student");

			entity.HasMany(d => d.Questions).WithMany(p => p.Exams)
				.UsingEntity<Dictionary<string, object>>(
					"Exam_Question",
					r => r.HasOne<Question>().WithMany()
						.HasForeignKey("Question_ID")
						.OnDelete(DeleteBehavior.ClientSetNull)
						.HasConstraintName("FK_Exam_Question_Question"),
					l => l.HasOne<Exam>().WithMany()
						.HasForeignKey("Exam_ID")
						.OnDelete(DeleteBehavior.ClientSetNull)
						.HasConstraintName("FK_Exam_Question_Exam"),
					j =>
					{
						j.HasKey("Exam_ID", "Question_ID");
						j.ToTable("Exam_Question");
					});
		});

		modelBuilder.Entity<Exam_Structure>(entity =>
		{
			entity.HasOne(d => d.Course).WithMany(p => p.Exam_Structures).HasConstraintName("FK_Exam_Structure_Course");
		});

		modelBuilder.Entity<Instructor>(entity =>
		{
			entity.HasOne(d => d.Dept).WithMany(p => p.Instructors).HasConstraintName("FK_Instructor_Department");

			entity.HasMany(d => d.Courses).WithMany(p => p.Instructors)
				.UsingEntity<Dictionary<string, object>>(
					"Instructor_Course",
					r => r.HasOne<Course>().WithMany()
						.HasForeignKey("Course_ID")
						.HasConstraintName("FK_Instructor_Courses_Course"),
					l => l.HasOne<Instructor>().WithMany()
						.HasForeignKey("Instructor_ID")
						.HasConstraintName("FK_Instructor_Courses_Instructor"),
					j =>
					{
						j.HasKey("Instructor_ID", "Course_ID");
						j.ToTable("Instructor_Courses");
					});
		});

		modelBuilder.Entity<Question>(entity =>
		{
			entity.HasOne(d => d.Course).WithMany(p => p.Questions)
				.OnDelete(DeleteBehavior.ClientSetNull)
				.HasConstraintName("FK_Question_Course");
		});

		modelBuilder.Entity<Student>(entity =>
		{
			entity.Property(e => e.First_Name).HasDefaultValueSql("(' ')");
			entity.Property(e => e.Second_Name).HasDefaultValueSql("(' ')");

			entity.HasOne(d => d.Dept).WithMany(p => p.Students).HasConstraintName("FK_Student_Department");

			entity.HasMany(d => d.Courses).WithMany(p => p.Students)
				.UsingEntity<Dictionary<string, object>>(
					"Student_Course",
					r => r.HasOne<Course>().WithMany()
						.HasForeignKey("Course_ID")
						.HasConstraintName("FK_Student_Course_Course"),
					l => l.HasOne<Student>().WithMany()
						.HasForeignKey("Student_ID")
						.HasConstraintName("FK_Student_Course_Student"),
					j =>
					{
						j.HasKey("Student_ID", "Course_ID");
						j.ToTable("Student_Course");
					});
		});

		modelBuilder.Entity<Student_Answer>(entity =>
		{
			entity.HasOne(d => d.Exam).WithMany(p => p.Student_Answers)
				.OnDelete(DeleteBehavior.ClientSetNull)
				.HasConstraintName("FK_Student_Answer_Exam");

			entity.HasOne(d => d.Question).WithMany(p => p.Student_Answers)
				.OnDelete(DeleteBehavior.ClientSetNull)
				.HasConstraintName("FK_Student_Answer_Question");

			entity.HasOne(d => d.Student).WithMany(p => p.Student_Answers)
				.OnDelete(DeleteBehavior.ClientSetNull)
				.HasConstraintName("FK_Student_Answer_Student");
		});

		modelBuilder.Entity<Topic>(entity =>
		{
			entity.HasOne(d => d.Course).WithMany(p => p.Topics).HasConstraintName("FK_Topic_Course");
		});

		OnModelCreatingPartial(modelBuilder);
	}

	partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}